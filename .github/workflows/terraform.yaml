name: "Terraform CICD - AWS Infra"

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main

env:
  # Verbosity setting for Terraform logs
  TF_LOG: ERROR
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

jobs:
# Terraform Dev
  terraform-dev:
    name: "Terraform Infra CICD Dev"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    environment: dev

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform init dev
        id: init-dev
        run: terraform init -reconfigure -backend-config=bucket=$BUCKET_TF_STATE

      # Quality checks
      - name: Terraform format
        id: fmt-dev
        run: terraform fmt -check

      - name: Terraform validate
        id: validate-dev
        run: terraform validate
      
      - name: Terraform plan - dev
        id: plan-dev
        if: github.event_name == 'pull_request'
        run: terraform plan -var-file=env/dev.tfvars -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-dev.outputs.stdout }}"
        with:
          script: |
           const output = `#### Terraform Format and Style - DEV üñå\`${{ steps.fmt-dev.outcome }}\`
           #### Terraform Initialization - DEV ‚öôÔ∏è\`${{ steps.init-dev.outcome }}\`
           #### Terraform Validation - DEV ü§ñ\`${{ steps.validate-dev.outcome }}\`
           #### Terraform Plan - DEV üìñ\`${{ steps.plan-dev.outcome }}\`
 
           <details><summary>Show Plan</summary>
 
           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`
 
           </details>
           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })

      - name: Terraform Plan Status
        if: steps.plan-dev.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

# Terraform Prod CI
  terraform-prod-ci:
    name: "Terraform Infra CICD Prod"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    environment: prod

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform init prod
        id: init-prod
        run: terraform init -reconfigure -backend-config=bucket=$BUCKET_TF_STATE

      # Quality checks
      - name: Terraform format
        id: fmt-prod
        run: terraform fmt -check

      - name: Terraform validate
        id: validate-prod
        run: terraform validate
      
      - name: Terraform plan - prod
        id: plan-prod
        if: github.event_name == 'pull_request'
        run: terraform plan -var-file=env/prod.tfvars -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-prod.outputs.stdout }}"
        with:
          script: |
           const output = `#### Terraform Format and Style - PROD üñå\`${{ steps.fmt-prod.outcome }}\`
           #### Terraform Initialization - PROD ‚öôÔ∏è\`${{ steps.init-prod.outcome }}\`
           #### Terraform Validation - PROD ü§ñ\`${{ steps.validate-prod.outcome }}\`
           #### Terraform Plan - PROD üìñ\`${{ steps.plan-prod.outcome }}\`
 
           <details><summary>Show Plan</summary>
 
           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`
 
           </details>
           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })

      - name: Terraform Plan Status
        if: steps.plan-prod.outcome == 'failure'
        run: exit 1
